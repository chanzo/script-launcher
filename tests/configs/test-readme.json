{
  "Implementation examples2": [
    {
      "name": "Sequential scripts",
      "files": {
        "launcher-config": {
          "scripts": {
            "build-stuff": [
              "echo Build step 1",
              "echo Build step 2",
              "echo Build step 3"
            ]
          }
        }
      },
      "tests": [
        {
          "command": "--script=build-stuff",
          "result": [
            "Build step 1",
            "Build step 2",
            "Build step 3"
          ]
        }
      ]
    },
    {
      "name": "Change directory",
      "files": {
        "launcher-config": {
          "scripts": {
            "build-stuff": [
              "node_modules/script-launcher",
              "dir"
            ]
          }
        }
      },
      "tests": [
        {
          "command": "--script=build-stuff",
          "result": [
            "bin\t\t  executor.js\t  LICENSE\tREADME.md\ncommon.js\t  launch.js\t  logger.js\tscripts.js\nconfig-loader.js  launch-menu.js  package.json\tspawn-process.js"
          ]
        }
      ]
    },
    {
      "name": "Parameters and functions",
      "files": {
        "launcher-config": {
          "scripts": {
            "serve:$project=uva:$config=dev": "echo ng serve $project -c=$config"
          }
        }
      },
      "tests": [
        {
          "command": "--script=serve",
          "result": [
            "ng serve uva -c=dev"
          ]
        },
        {
          "command": "--script=serve::tst",
          "result": [
            "ng serve uva -c=tst"
          ]
        },
        {
          "command": "--script=serve:hva:prd",
          "result": [
            "ng serve hva -c=prd"
          ]
        }
      ]
    },
    {
      "name": "Reference scripts",
      "files": {
        "launcher-config": {
          "scripts": {
            "build:$project:$config": "echo ng build $project -c=$config",
            "deploy:$project:$config": [
              "build:$project:$config",
              "echo firebase deploy --public dist/$project -P $project-$config"
            ],
            "deploy:$config": [
              "deploy:uva:$config",
              "deploy:hva:$config"
            ]
          }
        }
      },
      "tests": [
        {
          "command": "--script=deploy:tst",
          "result": [
            "ng build uva -c=tst",
            "firebase deploy --public dist/uva -P uva-tst",
            "ng build hva -c=tst",
            "firebase deploy --public dist/hva -P hva-tst"
          ]
        }
      ]
    },
    {
      "name": "Environment values and special commands",
      "files": {
        "launcher-config": {
          "scripts": {
            "build-stuff": {
              "condition": "echo grep example |? example",
              "sequential-then": [
                "echo ${launch_style_bold}Version:$launch_style_normal $launch_version",
                "echo ${launch_style_bold}Platform:$launch_style_normal $launch_platform",
                "--",
                "echo Color: ${launch_style_blue}Blue$launch_style_normal",
                "echo Color: ${launch_style_bold}Bold$launch_style_normal",
                "echo",
                "echo Color: ${launch_style_cyan}Cyan$launch_style_normal",
                "echo Color: ${launch_style_dim}Dim$launch_style_normal",
                "",
                "# The error of the next action will be suppressed",
                "exit 1 || true",
                "echo Color: ${launch_style_green}Green$launch_style_normal",
                "echo Color: ${launch_style_red}Red$launch_style_normal",
                "echo Color: ${launch_style_yellow}Yellow$launch_style_normal",
                "--"
              ]
            }
          }
        }
      },
      "tests": [
        {
          "command": "--script=build-stuff",
          "result": [
            "grep example",
            "\u001b[1mVersion:\u001b[0m 1.16.2",
            "\u001b[1mPlatform:\u001b[0m linux",
            "",
            "Color: \u001b[94mBlue\u001b[0m",
            "Color: \u001b[1mBold\u001b[0m",
            "Color: \u001b[36mCyan\u001b[0m",
            "Color: \u001b[2mDim\u001b[0m",
            "",
            "Color: \u001b[32mGreen\u001b[0m",
            "Color: \u001b[31mRed\u001b[0m",
            "Color: \u001b[33mYellow\u001b[0m",
            ""
          ]
        }
      ]
    },
    {
      "name": "Environment and command line argument values",
      "files": {
        "launcher-config": {
          "scripts": {
            "build-stuff": [
              "environment=my-env",
              "echo Node version: $npm_config_node_version",
              "echo Argument 1 : $1",
              "echo Argument 2 : $2",
              "echo All arguments: $*",
              "echo Offset arguments: $2*",
              "echo Environment : $environment"
            ]
          }
        }
      },
      "tests": []
    },
    {
      "name": "Glob patterns",
      "files": {
        "launcher-config": {
          "scripts": {
            "build-stuff": [
              "node_modules/script-launcher",
              "echo All files: *",
              "echo Markdown files: **/*.md"
            ]
          }
        }
      },
      "tests": [
        {
          "command": "--script=build-stuff",
          "result": [
            "All files: bin common.js config-loader.js executor.js launch-menu.js launch.js LICENSE logger.js package.json README.md scripts.js spawn-process.js",
            "Markdown files: README.md"
          ]
        }
      ]
    },
    {
      "name": "Launch arguments, command arguments, parameters and arguments",
      "files": {
        "launcher-config": {}
      },
      "tests": []
    },
    {
      "name": "Concurrent scripts",
      "files": {
        "launcher-config": {
          "scripts": {
            "sleep:$time": "node -e \"setTimeout(() => {}, $time)\"",
            "background:$job:$time": [
              "echo Background job : $job",
              "sleep:$time",
              "echo Completed job : $job"
            ],
            "build-stuff": {
              "concurrent": [
                "background:1:300",
                "background:2:500"
              ],
              "sequential": [
                "echo Sequential job : 3",
                "sleep:100",
                "echo Sequential job : 4",
                "sleep:100"
              ]
            }
          }
        }
      },
      "tests": [
        {
          "command": "--script=build-stuff",
          "result": [
            "Background job : 1",
            "Background job : 2",
            "Sequential job : 3",
            "Sequential job : 4",
            "Completed job : 1",
            "Completed job : 2"
          ]
        }
      ]
    },
    {
      "name": "Inline script blocks",
      "files": {
        "launcher-config": {
          "scripts": {
            "sleep:$time": "node -e \"setTimeout(() => {}, $time)\"",
            "background:$job:$time": [
              "echo Background job : $job",
              "sleep:$time",
              "echo Completed job : $job"
            ],
            "build-stuff": [
              [
                "background:1:300",
                "background:2:500"
              ],
              {
                "sequential": [
                  "echo Sequential job : 3",
                  "sleep:100",
                  "echo Sequential job : 4",
                  "sleep:100"
                ]
              }
            ]
          }
        }
      },
      "tests": [
        {
          "command": "--script=build-stuff",
          "result": [
            "Background job : 1",
            "Background job : 2",
            "Completed job : 1",
            "Completed job : 2",
            "Sequential job : 3",
            "Sequential job : 4"
          ]
        }
      ]
    },
    {
      "name": "Condition and exclusion constraints",
      "files": {
        "launcher-config": {}
      },
      "tests": []
    },
    {
      "name": "Repeaters",
      "files": {
        "launcher-config": {}
      },
      "tests": []
    },
    {
      "name": "Interactive menu",
      "files": {
        "launcher-config": {}
      },
      "tests": []
    }
  ]
}
