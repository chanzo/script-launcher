{
  "Implementation examples (readme.md)": [
    {
      "name": "Sequential scripts",
      "files": {
        "launcher-config": {
          "scripts": {
            "build-stuff": [
              "echo Build step 1",
              "echo Build step 2",
              "echo Build step 3"
            ]
          }
        }
      },
      "tests": [
        {
          "cmd-args": [
            "--script=build-stuff"
          ],
          "npm-args": [],
          "result": [
            "Build step 1",
            "Build step 2",
            "Build step 3"
          ]
        }
      ]
    },
    {
      "name": "Change directory",
      "files": {
        "launcher-config": {
          "scripts": {
            "build-stuff": [
              "node_modules/script-launcher",
              "dir"
            ]
          }
        }
      },
      "tests": [
        {
          "cmd-args": [
            "--script=build-stuff"
          ],
          "npm-args": [],
          "result": [
            "bin\t\t  executor.js\t  LICENSE\tREADME.md\ncommon.js\t  launch.js\t  logger.js\tscripts.js\nconfig-loader.js  launch-menu.js  package.json\tspawn-process.js"
          ]
        }
      ]
    },
    {
      "name": "Parameters and functions",
      "files": {
        "launcher-config": {
          "scripts": {
            "serve:$project=uva:$config=dev": "echo ng serve $project -c=$config"
          }
        }
      },
      "tests": [
        {
          "cmd-args": [
            "--script=serve"
          ],
          "npm-args": [],
          "result": [
            "ng serve uva -c=dev"
          ]
        },
        {
          "cmd-args": [
            "--script=serve::tst"
          ],
          "npm-args": [],
          "result": [
            "ng serve uva -c=tst"
          ]
        },
        {
          "cmd-args": [
            "--script=serve:hva:prd"
          ],
          "npm-args": [],
          "result": [
            "ng serve hva -c=prd"
          ]
        }
      ]
    },
    {
      "name": "Reference scripts",
      "files": {
        "launcher-config": {
          "scripts": {
            "build:$project:$config": "echo ng build $project -c=$config",
            "deploy:$project:$config": [
              "build:$project:$config",
              "echo firebase deploy --public dist/$project -P $project-$config"
            ],
            "deploy:$config": [
              "deploy:uva:$config",
              "deploy:hva:$config"
            ]
          }
        }
      },
      "tests": [
        {
          "lifecycle": "start",
          "cmd-args": [],
          "npm-args": [
            "deploy:tst"
          ],
          "result": [
            "ng build uva -c=tst",
            "firebase deploy --public dist/uva -P uva-tst",
            "ng build hva -c=tst",
            "firebase deploy --public dist/hva -P hva-tst"
          ]
        }
      ]
    },
    {
      "name": "Environment values and special commands",
      "files": {
        "launcher-config": {
          "scripts": {
            "build-stuff": {
              "condition": "echo grep example |? example",
              "sequential-then": [
                "echo ${launch_style_bold}Version:$launch_style_normal $launch_version",
                "echo ${launch_style_bold}Platform:$launch_style_normal $launch_platform",
                "--",
                "echo Color: ${launch_style_blue}Blue$launch_style_normal",
                "echo Color: ${launch_style_bold}Bold$launch_style_normal",
                "echo",
                "echo Color: ${launch_style_cyan}Cyan$launch_style_normal",
                "echo Color: ${launch_style_dim}Dim$launch_style_normal",
                "",
                "# The error of the next action will be suppressed",
                "exit 1 || true",
                "echo Color: ${launch_style_green}Green$launch_style_normal",
                "echo Color: ${launch_style_red}Red$launch_style_normal",
                "echo Color: ${launch_style_yellow}Yellow$launch_style_normal",
                "--"
              ]
            }
          }
        }
      },
      "tests": [
        {
          "cmd-args": [
            "--script=build-stuff"
          ],
          "npm-args": [],
          "result": [
            "grep example",
            "\u001b[1mVersion:\u001b[0m 1.16.2",
            "\u001b[1mPlatform:\u001b[0m linux",
            "",
            "Color: \u001b[94mBlue\u001b[0m",
            "Color: \u001b[1mBold\u001b[0m",
            "Color: \u001b[36mCyan\u001b[0m",
            "Color: \u001b[2mDim\u001b[0m",
            "",
            "Color: \u001b[32mGreen\u001b[0m",
            "Color: \u001b[31mRed\u001b[0m",
            "Color: \u001b[33mYellow\u001b[0m",
            ""
          ]
        }
      ]
    },
    {
      "name": "Environment and command line argument values",
      "files": {
        "launcher-config": {
          "scripts": {
            "build-stuff": [
              "environment=my-env",
              "echo Node version: $npm_config_node_version",
              "echo Argument 1 : $1",
              "echo Argument 2 : $2",
              "echo All arguments: $*",
              "echo Offset arguments: $2*",
              "echo Environment : $environment"
            ]
          }
        }
      },
      "tests": [
        {
          "lifecycle": "start",
          "cmd-args": [],
          "npm-args": [
            "build-stuff",
            "arg1",
            "arg2",
            "arg3"
          ],
          "result": [
            "Node version: 10.16.3",
            "Argument 1 : arg1",
            "Argument 2 : arg2",
            "All arguments: arg1 arg2 arg3",
            "Offset arguments: arg2 arg3",
            "Environment : my-env"
          ]
        }
      ]
    },
    {
      "name": "Glob patterns",
      "files": {
        "launcher-config": {
          "scripts": {
            "build-stuff": [
              "node_modules/script-launcher",
              "echo All files: *",
              "echo Markdown files: **/*.md"
            ]
          }
        }
      },
      "tests": [
        {
          "cmd-args": [
            "--script=build-stuff"
          ],
          "npm-args": [],
          "result": [
            "All files: bin common.js config-loader.js executor.js launch-menu.js launch.js LICENSE logger.js package.json README.md scripts.js spawn-process.js",
            "Markdown files: README.md"
          ]
        }
      ]
    },
    {
      "name": "Launch arguments, command arguments, parameters and arguments",
      "files": {
        "launcher-config": {
          "scripts": {
            "myFunc:$funcParam1:$funcParam2": [
              "echo Function Parameter 1: $funcParam1",
              "echo Function Parameter 2: $funcParam2",
              "echo Function Arguments 1: $1",
              "echo Function Arguments 2: $2",
              "echo Function All arguments: $*"
            ],
            "build-stuff:$myParam1:$myParam2": [
              "--",
              "echo Parameter 1: $myParam1",
              "echo Parameter 2: ${myParam2}",
              "echo Arguments 1: $1",
              "echo Arguments 2: $2",
              "echo All arguments: $*",
              "echo Offset arguments: $2*",
              "--",
              "myFunc:$myParam1:funcParam funcArg $1",
              "--"
            ]
          }
        }
      },
      "tests": [
        {
          "lifecycle": "start",
          "npm-args": [
            "build-stuff:param1:param2",
            "arg1",
            "arg2",
            "arg3"
          ],
          "result": [
            "",
            "Parameter 1: param1",
            "Parameter 2: param2",
            "Arguments 1: arg1",
            "Arguments 2: arg2",
            "All arguments: arg1 arg2 arg3",
            "Offset arguments: arg2 arg3",
            "",
            "Function Parameter 1: param1",
            "Function Parameter 2: funcParam",
            "Function Arguments 1: funcArg",
            "Function Arguments 2: arg1",
            "Function All arguments: funcArg arg1",
            ""
          ]
        }
      ]
    },
    {
      "name": "Concurrent scripts",
      "files": {
        "launcher-config": {
          "scripts": {
            "sleep:$time": "node -e \"setTimeout(() => {}, $time)\"",
            "background:$job:$time": [
              "echo Background job : $job",
              "sleep:$time",
              "echo Completed job : $job"
            ],
            "build-stuff": {
              "concurrent": [
                "background:1:300",
                "background:2:500"
              ],
              "sequential": [
                "echo Sequential job : 3",
                "sleep:100",
                "echo Sequential job : 4",
                "sleep:100"
              ]
            }
          }
        }
      },
      "tests": [
        {
          "cmd-args": [
            "--script=build-stuff"
          ],
          "npm-args": [],
          "result": [
            "Background job : 1",
            "Background job : 2",
            "Sequential job : 3",
            "Sequential job : 4",
            "Completed job : 1",
            "Completed job : 2"
          ]
        }
      ]
    },
    {
      "name": "Inline script blocks",
      "files": {
        "launcher-config": {
          "scripts": {
            "sleep:$time": "node -e \"setTimeout(() => {}, $time)\"",
            "background:$job:$time": [
              "echo Background job : $job",
              "sleep:$time",
              "echo Completed job : $job"
            ],
            "build-stuff": [
              [
                "background:1:300",
                "background:2:500"
              ],
              {
                "sequential": [
                  "echo Sequential job : 3",
                  "sleep:100",
                  "echo Sequential job : 4",
                  "sleep:100"
                ]
              }
            ]
          }
        }
      },
      "tests": [
        {
          "cmd-args": [
            "--script=build-stuff"
          ],
          "npm-args": [],
          "result": [
            "Background job : 1",
            "Background job : 2",
            "Completed job : 1",
            "Completed job : 2",
            "Sequential job : 3",
            "Sequential job : 4"
          ]
        }
      ]
    },
    {
      "name": "Condition and exclusion constraints",
      "files": {
        "launcher-config": {
          "scripts": {
            "build-stuff": [
              {
                "exclusion": "node_modules_test",
                "sequential-then": [
                  "echo npm install",
                  "mkdir node_modules_test"
                ]
              },
              {
                "condition": "node_modules_test",
                "sequential-then": [
                  "echo npm start",
                  {
                    "condition": "'$launch_platform'==='win32'",
                    "sequential": "echo Test platform type.",
                    "sequential-then": "rmdir node_modules_test",
                    "sequential-else": "rm -d node_modules_test"
                  }
                ]
              }
            ]
          },
          "options": {
            "logLevel": 0
          }
        }
      },
      "tests": [
        {
          "lifecycle": "start",
          "npm-args": [
            "build-stuff"
          ],
          "result": [
            "/bin/sh: 1: node_modules_test: not found",
            "npm install",
            "npm start",
            "Test platform type."
          ]
        }
      ]
    },
    {
      "name": "Repeaters",
      "files": {
        "launcher-config": {
          "scripts": {
            "ping": [
              {
                "repeater": "$launch_setting_servers",
                "sequential": [
                  "echo Action: $launch_setting_command $_"
                ]
              }
            ]
          },
          "settings": {
            "command": "ping",
            "servers": [
              "www.google.com",
              "duckduckgo.com",
              "bing.com"
            ]
          }
        }
      },
      "tests": [
        {
          "lifecycle": "start",
          "npm-args": [
            "ping"
          ],
          "result": [
            "Action: ping www.google.com",
            "Action: ping duckduckgo.com",
            "Action: ping bing.com"
          ]
        }
      ]
    },
    {
      "name": "Interactive menu",
      "files": {
        "launcher-config": {}
      },
      "tests": []
    },
    {
      "name": "Launcher settings",
      "files": {
        "launcher-config": {
          "scripts": {
            "build:$config": [
              "echo name: $launch_setting_name",
              "echo version: $launch_setting_${config}_version",
              "echo ng build -c=$config --deploy-url $launch_setting_${config}_url",
              "",
              {
                "repeater": "$launch_setting_${config}_server",
                "sequential": [
                  "echo Deploying to: $_"
                ]
              }
            ]
          },
          "settings": {
            "name": "example",
            "dev": {
              "version": "2.0.0",
              "url": "$launch_setting_name.dev.com",
              "server": [
                "server1.dev.com",
                "server2.dev.com"
              ]
            },
            "acc": {
              "version": "1.9.0",
              "url": "$launch_setting_name.acc.com",
              "server": [
                "server1.acc.com",
                "server2.acc.com"
              ]
            },
            "production": {
              "version": "1.8.0",
              "url": "$launch_setting_name.prd.com",
              "server": [
                "server1.prd.com",
                "server2.prd.com"
              ]
            }
          }
        }
      },
      "tests": [
        {
          "lifecycle": "start",
          "npm-args": [
            "build:dev"
          ],
          "result": [
            "name: example",
            "version: 2.0.0",
            "ng build -c=dev --deploy-url example.dev.com",
            "",
            "Deploying to: server1.dev.com",
            "Deploying to: server2.dev.com"
          ]
        },
        {
          "lifecycle": "start",
          "npm-args": [
            "build:acc"
          ],
          "result": [
            "name: example",
            "version: 1.9.0",
            "ng build -c=acc --deploy-url example.acc.com",
            "",
            "Deploying to: server1.acc.com",
            "Deploying to: server2.acc.com"
          ]
        },
        {
          "lifecycle": "start",
          "npm-args": [
            "build:production"
          ],
          "result": [
            "name: example",
            "version: 1.8.0",
            "ng build -c=production --deploy-url example.prd.com",
            "",
            "Deploying to: server1.prd.com",
            "Deploying to: server2.prd.com"
          ]
        }
      ]
    }
  ]
}
